//https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

class Solution {
public:
     int findMin(vector<int> &num) {
        int start=0,end=num.size()-1;
        
        while (start<end) {
            
            int mid = start+(end-start)/2;
            
            if (num[mid]>num[end]) {
                start = mid+1;
            } else  if (num[mid]<num[end])  {
                end = mid;  // see commented code below
            }
            else if(num[mid]==num[end])end--;
        }
        
        return num[start];
    }
    
};
// Just think of it in general for a binary search, you have an array and you do two steps. First you see if what you're looking at now is the answer. In this case we want to see if start is less than end. Ok now if that's not true then you go on to the second step, which is to divide the array into two parts. From start to mid, and mid + 1 to end. Now you chose which side of the array brings your closer to the solution and go back to step 1.

// The point is, if we do as you say, which is to say end = mid - 1, then you are always leaving out an element when you divide the array in half. So therefore you aren't dividing it into two contiguous halves.

// Here's an example to prove the point.
// Line 1 [4, 7, 8, 9, 13, 14, 18, 1, 2, 3]
// Line 2 [4, 7, 8, 9, 13] [14, 18, 1, 2, 3]
// Line 3 [14, 18, 1, 2, 3]
// Line 4[14, 18 , 1]
// Line 5 [18, 1]
// Line 6 [1]
// Line 7 return start (1)

// If we had said end = mid - 1, then line 4 would have excluded the 1, which is the answer.

